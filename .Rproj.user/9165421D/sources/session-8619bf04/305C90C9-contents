library(jsonlite)
df <- fromJSON("D:/PYDataScience/HIV_TXP_SR/data/supp.json")

if_df <- df[c('sample_size_(hiv_seropositive_only)', 'study_id', 
              "1-year_infection_incidence(100_pt-yr)_hiv+",                
              "3-year_infection_incidence(100_pt-yr)_hiv+",
              ">=_5-year_infection_incidence(100_pt-yr)_hiv+")]
names(if_df) <- c('sample_size', 'study_id', '1_yr', '3_yr', '5_yr')

print(if_df)

library(metafor)
library(ggplot2)
library(dplyr)

# Drop NA and convert percentages to proportions
valid_indices <- which(!is.na(if_df$'1_yr'))
valid_effects <- if_df$'1_yr'[valid_indices]
sample_sizes <-if_df$sample_size[valid_indices]
valid_study_ids <- if_df$study_id[valid_indices]

# Log Transformation
transformed_rates <- log(valid_effects)

# Calculate the variance of the transformed rates
var_transformed <- 1 / sample_sizes

# Meta-analysis using the DerSimonian and Laird random effects model
meta_analysis_result <- rma(yi = transformed_rates, vi = var_transformed, method = "DL")

# Calculate the standard errors for the log-transformed effect sizes
se_log <- sqrt(meta_analysis_result$vi)
# Calculate the confidence intervals on the log scale
z_value <- qnorm(0.975)  # For a 95% CI
ci_lb_log <- meta_analysis_result$yi - z_value * se_log
ci_ub_log <- meta_analysis_result$yi + z_value * se_log

# Back-transform the confidence intervals to the original scale
ci_lb_original_scale <- exp(ci_lb_log)
ci_ub_original_scale <- exp(ci_ub_log)
effect_size_original_scale <- exp(meta_analysis_result$yi)
# Combine the results into a data frame
study_results <- data.frame(
  study_id = valid_study_ids,
  sample_size = sample_sizes,
  effect_size = effect_size_original_scale,
  ci_lb = ci_lb_original_scale,
  ci_ub = ci_ub_original_scale,
  weight = weights(meta_analysis_result)
)
study_results$weight_percent <- sprintf("%.2f%%", study_results$weight)

# Retrieve the pooled estimate from the meta-analysis result
pooled_logit_effect_size <- meta_analysis_result$b

# Retrieve the confidence interval for the pooled estimate
pooled_ci_lb_log <- meta_analysis_result$ci.lb
pooled_ci_ub_log <- meta_analysis_result$ci.ub

# Back-transform the pooled estimate and confidence interval from logit to proportion
pooled_effect_size <- exp(pooled_logit_effect_size)
pooled_ci_lb <- exp(pooled_ci_lb_log)
pooled_ci_ub <- exp(pooled_ci_ub_log)

# Now create a separate data frame just for the pooled estimate
pooled_results <- data.frame(
  study_id = "Pooled Estimate",
  sample_size = sum(study_results$sample_size),
  effect_size = pooled_effect_size,
  ci_lb = pooled_ci_lb,
  ci_ub = pooled_ci_ub,
  weight = sum(study_results$weight)
)
pooled_results$weight_percent <- sprintf("%.2f%%", sum(study_results$weight))
# Combine the individual study results with the pooled estimate
all_results <- rbind(study_results, pooled_results)
# Convert the 'study_id' to a factor and specify the level order to ensure
# the pooled estimate is at the end (the bottom when plotted)
all_results$study_id <- factor(all_results$study_id, levels = c(as.character(study_results$study_id), "Pooled Estimate"))
# Add a column for the formatted CI string
all_results$ci_text <- paste0("[", round(all_results$ci_lb, 2), ", ", round(all_results$ci_ub, 2), "]")

# Add I2 and p-value from meta_analysis_result to the plot as annotations
I2 <- meta_analysis_result$I2
tau2 <- meta_analysis_result$tau2
p_value <- meta_analysis_result$QEp

